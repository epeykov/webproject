<?php
namespace App\Controller;
use Cake\Event\Event;
use App\Controller\AppController;
use Cake\Core\Configure;
use App\Controller\DateTime;


/**
 * Articles Controller
 *
 * @property \App\Model\Table\ArticlesTable $Articles
 */
class ArticlesController extends AppController
{

public function initialize()
    {
        parent::initialize();
		
        $this->loadComponent('Flash'); // Include the FlashComponent
		 // Set the layout
    $this->viewBuilder()->layout('default');
    }
public function beforeFilter(Event $event)
    {
        parent::beforeFilter($event);
		
        $this->Auth->allow(['index','view']);
    }
 
 /**
     * Index method
     *
     * @return \Cake\Network\Response|null
     */
    public function index()
    {
        $articles = $this->paginate($this->Articles);

        $this->set(compact('articles'));
        $this->set('_serialize', ['articles']);
    }

    /**
     * View method
     *
     * @param string|null $id Article id.
     * @return \Cake\Network\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {   
			
			if (is_null($id))
			{return $this->redirect(['action' => 'index']);} 
				else
				{
        $article = $this->Articles->get($id, [
            'contain' => ['Comments','Comments.Users'],
			'order' => ['created' => 'DESC']
			
			
        ]);
		
		
	
		
 $newComments = $this->Articles->Comments->find('threaded', [
	'conditions' => ['Comments.article_id' => $id],
	'contain' => ['Users'],
    'order' => ['Comments.created' => 'DESC'],
	'limit' => 10
	
	
	
])->toArray();

dump($newComments[0]);


$lastComments = $this->Articles->Comments->find('threaded', [
	'conditions' => ['Comments.article_id' => $id],
	'contain' => ['Users'],
	'order' => ['Comments.created' => 'DESC'],
	'limit' => 1000000,
	'offset' => 10
	
])->toArray();



		// Part from the add-action from Comments
		$comment = $this->Articles->Comments->newEntity();
		
if ($this->request->is('ajax')) {
	
             Configure::write('debug', 0);
			
			$comment = $this->Articles->Comments->patchEntity($comment, $this->request->data);
			
			$comment->user_id = $this->Auth->user('id');
			
			$comment->article_id=$article->id;
		
            if ($this->Articles->Comments->save($comment)) {
				//$this->autoRender = false;
				
				$comments=$this->Articles->Comments->find('threaded', [
	'conditions' => ['Comments.article_id' => $id],
	'contain' => ['Users'],
	'order' => ['Comments.created' => 'DESC'],
	'limit' => 10
	])->all();
				$this->set('comments',$comments);
				
		
		
        $this->set('article', $article);
        $this->set('_serialize', ['article']);
		$this->render('comments','ajax');
				
                //$this->Flash->success(__('The comment has been saved.'));
					
					
                //return $this->redirect(['action' => 'index']);
            } else {
                $this->Flash->error(__('The comment could not be saved. Please, try again.'));
            }
			
        }
	    


			
			
		$this->set('newComments', $newComments);
		$this->set('lastComments', $lastComments);
        $this->set('article', $article);
        $this->set('_serialize', ['article']);
	}
	
    }

    /**
     * Add method
     *
     * @return \Cake\Network\Response|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {	
        $article = $this->Articles->newEntity();
        if ($this->request->is('post')) {
			  
			if (!empty($this->request->data['image_upload']['name']))
		{		
				$file=$this->request->data['image_upload'];
				$ext = substr(strtolower(strrchr($file['name'], '.')), 1); 
				$arr_ext = array('jpg', 'jpeg', 'gif'); 
				if(in_array($ext, $arr_ext))
					
                      {
							move_uploaded_file($file['tmp_name'], WWW_ROOT . '/img/articles/' . $file['name']);
							
							$this->request->data['img']=$file['name'];
							
							
						}
				
			}
			
			$article->user_id = $this->Auth->user('id');
            $article = $this->Articles->patchEntity($article, $this->request->data);
			
            if ($this->Articles->save($article)) {
                $this->Flash->success(__('The article has been saved.'));

                return $this->redirect(['action' => 'index']);
            } else {
                $this->Flash->error(__('The article could not be saved. Please, try again.'));
            }
        }
		$this->set('article', $article);

		// Just added the categories list to be able to choose
        // one category for an article
        $categories = $this->Articles->Categories->find('treeList');
		
		
		
		$this->set(compact('comments'));
         $this->set(compact('categories'));

    }

    /**
     * Edit method
     *
     * @param string|null $id Article id.
     * @return \Cake\Network\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $article = $this->Articles->get($id, [
            'contain' => []
        ]);
		
		
        if ($this->request->is(['patch', 'post', 'put'])) {
			if (!empty($this->request->data['image_upload']['name']))
		{		
				$file=$this->request->data['image_upload'];
				$ext = substr(strtolower(strrchr($file['name'], '.')), 1); 
				$arr_ext = array('jpg', 'jpeg', 'gif'); 
				if(in_array($ext, $arr_ext))
					
                      {
							move_uploaded_file($file['tmp_name'], WWW_ROOT . '/img/articles/' . $file['name']);
							
							$this->request->data['img']=$file['name'];
							
							
						}
				
			}
			$article->user_id = $this->Auth->user('id');
            $article = $this->Articles->patchEntity($article, $this->request->data);
            if ($this->Articles->save($article)) {
                $this->Flash->success(__('The article has been saved.'));

                return $this->redirect(['action' => 'index']);
            } else {
                $this->Flash->error(__('The article could not be saved. Please, try again.'));
            }
        }
		
		  $this->set('article', $article);

        // Just added the categories list to be able to choose
        // one category for an article
        $categories = $this->Articles->Categories->find('treeList');
        $this->set(compact('categories'));

    }

    /**
     * Delete method
     *
     * @param string|null $id Article id.
     * @return \Cake\Network\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $article = $this->Articles->get($id);
        if ($this->Articles->delete($article)) {
            $this->Flash->success(__('The article has been deleted.'));
        } else {
            $this->Flash->error(__('The article could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }
	
}
